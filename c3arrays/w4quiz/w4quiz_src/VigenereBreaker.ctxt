#BlueJ class context
comment0.target=VigenereBreaker
comment1.params=message\ whichSlice\ totalSlices
comment1.target=java.lang.String\ sliceString(java.lang.String,\ int,\ int)
comment1.text=\n\ Returns\ a\ String\ consisting\ of\ every\ totalSlices-th\ character\ from\ message,\ \n\ starting\ at\ the\ whichSlice-th\ character.\n\ @parameter\ message\ -\ a\ String\ representing\ the\ encrypted\ message\n\ @parameter\ whichSlice\ -\ an\ int\ indicating\ the\ index\ the\ slice\ should\ start\ from\n\ @parameter\ totalSlices\ -\ an\ int\ indicating\ the\ length\ of\ the\ key\n
comment10.params=encrypted\ languages
comment10.target=void\ breakForAllLangs(java.lang.String,\ java.util.HashMap)
comment10.text=\n\ Breaks\ the\ encryption\ for\ each\ language,\ and\ prints\ the\ message\ in\ the\ \n\ language\ that\ gives\ the\ best\ results.\n\ @parameter\ encrypted\ is\ a\ String\ representing\ the\ encrypted\ message\n\ @parameter\ languages\ is\ a\ HashMap\ that\ maps\ a\ String\ representing\ the\ name\ of\ a\ language\ \n\ to\ a\ HashSet\ of\ Strings\ containing\ the\ words\ in\ that\ language\ \n
comment2.params=
comment2.target=void\ testSliceString()
comment3.params=encrypted\ klength\ mostCommon
comment3.target=int[]\ tryKeyLength(java.lang.String,\ int,\ char)
comment3.text=\n\ Finds\ the\ shift\ for\ each\ index\ in\ the\ key,\ fills\ in\ the\ key\ (which\ is\ an\ array\ of\ \n\ integers)\ and\ return\ it.\ Makes\ use\ of\ the\ CaesarCracker\ class,\ as\ well\ as\ the\ \n\ sliceString\ method.\ \n\ @parameter\ encrypted\ -\ a\ String\ representing\ the\ encrypted\ message\n\ @parameter\ klength\ -\ an\ int\ representing\ the\ key\ length\ \n\ @parameter\ mostCommon\ -\ an\ int\ representing\ the\ most\ common\ character\ in\ the\ language\ \n\ of\ the\ message\n
comment4.params=
comment4.target=void\ testTryKeyLength()
comment5.params=
comment5.target=void\ breakVigenere()
comment5.text=\n\ Put\ everything\ together,\ so\ that\ you\ can\ create\ a\ new\ VigenereBreaker\ in\ BlueJ,\ \n\ call\ this\ method\ on\ it,\ and\ crack\ the\ cipher\ used\ on\ a\ message.\n
comment6.params=fr
comment6.target=java.util.HashSet\ readDictionary(edu.duke.FileResource)
comment6.text=\n\ Parses\ a\ file\ (which\ contains\ exactly\ one\ dictionary\ word\ per\ line)\ and\ returns\ a\ HashSet\ \n\ consisting\ of\ all\ the\ parsed\ words.\n
comment7.params=message\ dictionary
comment7.target=int\ countWords(java.lang.String,\ java.util.HashSet)
comment7.text=\n\ Split\ the\ message\ into\ words,\ iterates\ over\ those\ words,\ and\ sees\ how\ many\ of\ them\ are\ \n\ "real\ words"\ \u2014\ that\ is,\ how\ many\ appear\ in\ the\ dictionary.\n
comment8.params=encrypted\ dictionary
comment8.target=java.lang.String\ breakForLanguage(java.lang.String,\ java.util.HashSet)
comment8.text=\n\ Figures\ out\ which\ decryption\ gives\ the\ largest\ count\ of\ real\ words,\ \n\ and\ returns\ that\ String\ decryption.\n
comment9.params=dictionary
comment9.target=char\ mostCommonCharIn(java.util.HashSet)
comment9.text=\n\ Returns\ character,\ of\ the\ letters\ in\ the\ English\ alphabet,\ that\ appears\ \n\ most\ often\ in\ the\ words\ in\ dictionary.\n
numComments=11
